import torch
from ultralytics.utils.loss import v8DetectionLoss


class SFYOLOv8Loss(v8DetectionLoss):
    """
    Loss function for Source-Free YOLO domain adaptation based on v8DetectionLoss.
    
    This class extends the Ultralytics YOLOv8 detection loss to work with pseudo-labels
    generated by a teacher model in the SF-YOLO setting.
    """
    
    def __init__(self, model):
        """
        Initialize the SF-YOLO loss.
        
        Args:
            model: The YOLO model for which to compute losses
        """
        # Call parent class initialization with the model
        super().__init__(model)

    def __call__(self, preds, pseudo_labels):
        """
        Calculate losses using teacher-generated pseudo-labels.
        
        Args:
            preds: Predictions from the student model
            pseudo_labels: Pseudo-labels generated by the teacher model [img_idx, cls, x, y, w, h]
            
        Returns:
            tuple: (total_loss, loss_items) 
        """
        # Format pseudo-labels to match the expected batch format
        batch = self._format_pseudo_labels(pseudo_labels)
        
        # Call the parent class to compute the loss
        total_loss, loss_items = super().__call__(preds, batch)
        
        # Optional: Add any additional loss components specific to SF-YOLO
        # For example, you could add feature distillation loss here if needed
        
        return total_loss, loss_items
    
    def _format_pseudo_labels(self, pseudo_labels):
        """
        Convert pseudo-labels from the teacher to the batch format expected by v8DetectionLoss.
        
        Args:
            pseudo_labels: Tensor with format [img_idx, cls, x, y, w, h]
            
        Returns:
            dict: Batch dictionary with 'batch_idx', 'cls', and 'bboxes' keys
        """
        print(type(pseudo_labels))
        # Ensure we have pseudo-labels to work with
        if pseudo_labels.numel() == 0 or pseudo_labels.shape[0] == 0:
            # Create a minimal default batch with a dummy bbox that won't impact the loss
            return {
                'batch_idx': torch.zeros(0, device=self.device).long(),
                'cls': torch.zeros(0, device=self.device).long(),
                'bboxes': torch.zeros((0, 4), device=self.device)
            }
        
        # Extract components from pseudo-labels
        batch_idx = pseudo_labels[:, 0].long()
        cls = pseudo_labels[:, 1].long()
        bboxes = pseudo_labels[:, 2:6]  # Already in xywh format
        
        # Create the batch dictionary
        batch = {
            'batch_idx': batch_idx,
            'cls': cls,
            'bboxes': bboxes  # v8DetectionLoss expects boxes in xywh format
        }
        
        return batch